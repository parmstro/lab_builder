---
# This play adds the filter rules to a content view filter
#
#

- name: Determine if CV Filter has existing rules
  command: "hammer --no-headers content-view filter rule list --content-view={{ cv.name | quote }} --organization={{ cv.org | quote }} --content-view-filter={{ cvf.name | quote }}"
  register: cvfr_exists
  ignore_errors: true

- name: Creating the base command
  set_fact:
    hammer_command: "hammer content-view filter rule create --organization={{ cv.org | quote }} --content-view={{ cv.name | quote }} --content-view-filter={{ cvf.name | quote }}"

- name: Add erratum types if applicable
  set_fact:
    hammer_command: "{{ hammer_command }} --types={{ cvfr.types | join(',') | quote }}" 
  when: "cvfr.types is defined"

- name: Specifiy architecture if applicable
  set_fact:
    hammer_command: "{{ hammer_command }} --architecture={{ cvfr.basearch }}"
  when: "cvfr.basearch is defined"

- name: Specify rule name
  set_fact:
    hammer_command: "{{ hammer_command }} --name={{ cvfr.name | quote }}"
  when: "cvf.type == 'rpm'"

- name: Specify End Date if applicable
  set_fact:
    hammer_command: "{{ hammer_command }} --end-date={{ cvfr.enddate }}"
  when: "cvfr.enddate is defined"

- name: Specify Start Date if applicable
  set_fact:
    hammer_command: "{{ hammer_command }} --start-date={{ cvfr.startdate }}"
  when: "cvfr.startdate is defined"

- name: Specify Date Type (issued/updated) if applicable
  set_fact:
    hammer_command: "{{ hammer_command }} --date-type={{ cvfr.datetype }}"
  when: "cvfr.datetype is defined"

- name: Command to execute
  debug:
    msg: "{{ hammer_command }}"

- name: Creating Content View Filter Rule {{ cvfr.name }}
  command: "{{ hammer_command }}"
  when: "cvfr_exists.stdout == ''"
