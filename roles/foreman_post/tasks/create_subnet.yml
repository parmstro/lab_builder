---
# Create the subnet defined

- name: Delete the subnet if it already exists
  command: "hammer subnet delete --name={{ subnet.name | quote }} --organization={{ subnet.organization | quote }} --location={{ subnet.location }}"
  ignore_errors: true

# Create and update are identical unless you are changing an existing name so just build create command
- name: Create the base subnet command
  set_fact:
    hammer_command: "hammer subnet create --name={{ subnet.name | quote }}"

- name: Build the command - boot-mode
  set_fact:
    hammer_command: "{{ hammer_command }} --boot-mode={{ subnet.boot_mode | quote }}"
  when: "subnet.boot_mode is defined"

- name: Build the command - description
  set_fact:
    hammer_command: "{{ hammer_command }} --description={{ subnet.description | quote }}"
  when: "subnet.description is defined"


# The ID of the capsule supporting DHCP services - we are using hardware
- name: Get the DHCP Capsule ID
  command: "hammer --output=json capsule info --name={{ subnet.capsules.[?(type='DHCP')].name | quote }}"
  register: hammer_out
  when: "subnet.capsules.[?(type='DHCP')].name is defined"

- set_fact:
    dhcp_capsule_id: "{{  hammer_out.stdout | from_json | json_query('Id')}}"
  when: "subnet.capsules.[?(type='DHCP')].name is defined"

- name: Build the command - dhcp-id
  set_fact:
    hammer_command: "{{ hammer_command }} --dhcp-id={{ dhcp_capsule_id }}"
  when: "subnet.capsules.[?(type='DHCP')].name is defined"


# The ID of the capsule supporting Discovery services - our satellite is
- name: Get the Discovery Capsule ID
  command: "hammer --output=json capsule info --name={{ subnet.capsules.[?(type='Discovery')].name | quote }}"
  register: hammer_out
  when: "subnet.capsules.[?(type='Discovery')].name is defined"

- set_fact:
    discovery_capsule_id: "{{  hammer_out.stdout | from_json | json_query('Id')}}"
  when: "subnet.capsules.[?(type='Discovery')].name is defined"

- name: Build the command - discovery-id
  set_fact:
    hammer_command: "{{ hammer_command }} --discovery-id={{ discovery_capsule_id }}"
  when: "subnet.capsules.[?(type='Discovery')].name is defined"

- name: Get the TFTP Capsule ID
  command: "hammer --output=json capsule info --name={{ subnet.capsules.[?(type='TFTP')].name | quote }}"
  register: hammer_out
  when: "subnet.capsules.[?(type='TFTP')].name is defined"

- set_fact:
    tftp_capsule_id: "{{  hammer_out.stdout | from_json | json_query('Id')}}"
  when: "subnet.capsules.[?(type='TFTP')].name is defined"

- name: Build the command - tftp-id
  set_fact:
    hammer_command: "{{ hammer_command }} --tftp-id={{ tftp_capsule_id }}"
  when: "subnet.capsules.[?(type='TFTP')].name is defined"


- name: Get the Template Capsule ID
  command: "hammer --output=json capsule info --name={{ subnet.capsules.[?(type='Template')].name | quote }}"
  register: hammer_out
  when: "subnet.capsules.[?(type='Template')].name is defined"

- set_fact:
    template_capsule_id: "{{  hammer_out.stdout | from_json | json_query('Id')}}"
  when: "subnet.capsules.[?(type='Template')].name is defined"

- name: Build the command - template-id
  set_fact:
    hammer_command: "{{ hammer_command }} --template-id={{ template_capsule_id }}"
  when: "subnet.capsules.[?(type='Template')].name is defined"


# The ID of the capsule supporting DNS services - our satellite is - throught REALM
# This will update the DNS managed by IdM
- name: Get the DNS Capsule ID
  command: "hammer --output=json capsule info --name={{ subnet.capsules.[?(type='DNS')].name | quote }}"
  register: hammer_out
  when: "subnet.capsules.[?(type='DNS')].name is defined"

- set_fact:
    dns_capsule_id: "{{  hammer_out.stdout | from_json | json_query('Id')}}"
  when: "subnet.capsules.[?(type='DNS')].name is defined"

- name: Build the command - dns-id
  set_fact:
    hammer_command: "{{ hammer_command }} --dns-id={{ dns_capsule_id }}"
  when: "subnet.capsules.[?(type='DNS')].name is defined"


- name: Build the command - domains
  set_fact:
    hammer_command: "{{ hammer_command }} --domains={{ subnet.domains | list | quote }}"
  when: 
    - "subnet.domains is defined"
    - "subnet.domains.length > 0"

- name: Build the command - subnet starting ip - from
  set_fact:
    hammer_command: "{{ hammer_command }} --from={{ subnet.from | quote }}"
  when: "subnet.from is defined"

- name: Build the command - subnet ending ip - to
  set_fact:
    hammer_command: "{{ hammer_command }} --to={{ subnet.to | quote }}"
  when: "subnet.to is defined"

- name: Build the command - VLANID
  set_fact:
    hammer_command: "{{ hammer_command }} --vlanid={{ subnet.vlanid | quote }}"
  when: "subnet.vlanid is defined"

- name: Build the command - subnet netmask
  set_fact:
    hammer_command: "{{ hammer_command }} --mask={{ subnet.mask | quote }}"
  when: "subnet.mask is defined"

- name: Build the command - subnet network prefix 
  set_fact:
    hammer_command: "{{ hammer_command }} --network={{ subnet.network | quote }}"
  when: "subnet.network is defined"

- name: Build the command - subnet gateway
  set_fact:
    hammer_command: "{{ hammer_command }} --gateway={{ subnet.gateway | quote }}"
  when: "subnet.gateway is defined"

- name: Build the command - DNS primary
  set_fact:
    hammer_command: "{{ hammer_command }} --dns-primary={{ subnet.dns_primary | quote }}"
  when: "subnet.dns_primary is defined"

- name: Build the command - DNS secondary
  set_fact:
    hammer_command: "{{ hammer_command }} --dns-secondary={{ subnet.dns_secondary | quote }}"
  when: "subnet.dns_secondary is defined"

- name: Build the command - network type (IPV4 or IPV6)
  set_fact:
    hammer_command: "{{ hammer_command }} --network-type={{ subnet.network_type | quote }}"
  when: "subnet.network_type is defined"

- name: Build the command - IPAM (DHCP,InternalDB, None)
  set_fact:
    hammer_command: "{{ hammer_command }} --ipam={{ subnet.ipam | quote }}"
  when: "subnet.ipam is defined"

- name: Build the command - locations
  set_fact:
    hammer_command: "{{ hammer_command }} --location={{ subnet.locations | list | quote }}"
  when: 
    - "subnet.locations is defined"
    - "subnet.locations.length > 0"

- name: Build the command - organizations
  set_fact:
    hammer_command: "{{ hammer_command }} --dns-primary={{ subnet.organizations | list | quote }}"
  when:
    - "subnet.organizations is defined"
    - "subnet.organizations.length > 0"

- name: Create the Subnet - execute the hammer command
  command: "{{ hammer_command }}"


