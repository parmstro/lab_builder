---
# This task controls the install and initial configuration of IdM
- import_tasks: role_begin.yml

- name: "Enable the RHEL Server repo required for IdM"
  command: "subscription-manager repos --enable=rhel-7-server-rpms"

# to handle bug see: https://access.redhat.com/solutions/3948781
#
- name: "Enable the optional repo temporarily"
  command: "subscription-manager repos --enable=rhel-7-server-optional-rpms"

- name: "Updating the system... this may take a while."
  yum:
    name: "*"
    state: latest
 
- name: "Configure the IdM firewall"
  import_tasks: idm_firewall.yml

- name: "Uninstall the idm server if it exists"
  command: "ipa-server-install --uninstall --unattended"
  ignore_errors: yes

- name: "Uninstall idm client if it exists, should be uninstalled with the server"
  command: "ipa-client-install --uninstall --unattended"
  ignore_errors: yes

- name: "Install IdM packages"
  yum: 
    name: ipa-server 
    state: latest

- name: "Install IdM DNS packages"
  yum:
    name: ipa-server-dns
    state: latest
  when: "setupdns == true"

- name: "Generating idm install options - home directories"
  set_fact: 
    idmserveropts: "--mkhomedir"
  when: "makehomedir == true"

- name: "Generating idm install options - host lookup"
  set_fact: 
    idmserveropts: "{{ idmserveropts }} --no-host-dns"
  when: "nodnshost == true"

- name: "Generating idm install options - ssh options"
  set_fact: 
    idmserveropts: "{{ idmserveropts }} --ssh-trust-dns"
  when: "sshtrustdns == true"

- name: "Generating idm install options - dns setup"
  set_fact:
    idmserveropts: "{{ idmserveropts }} --setup-dns"
  when: "setupdns == true"

- name: "Generating idm install options - reverse lookup zones"
  set_fact: 
    idmserveropts: "{{ idmserveropts }} --auto-reverse"
  when: "autoreversedns == true"

- name: "Generating idm install options - dns forwarders"
  set_fact: 
    idmserveropts: "{{ idmserveropts }} --forwarder={{ item }}"
  loop: "{{ dnsforwarders }}"

- name: "Generating idm install options - dns forwarding policy"
  set_fact: 
    idmserveropts: "{{ idmserveropts }} --forward-policy=only"
  when: "dnsforwardonly == true"

# This requires that the installation was previsously run to generate a CSR to be 
# signed by the external signing authority and that the external-cert-file exists

- name: "If the externally signed cert exists, create the target directory"
  file:
    state: directory
    dest: "{{ externalcacertfiledestdir }}"
  when: "useextrernalcert == true"

- name: "If the externally signed cert exists copy it to the target"
  copy:
    src: "{{ externalcacertfilesrc }}"
    dest: "{{ externalcacertfiledest }}"
    owner: root
    group: root
    mode: 0700
  when: "useextrernalcert == true"

- name: "Generating idm install options - use externally signed certificate"
  set_fact: 
    idmserveropts: "{{ idmserveropts }} --external-cert-file={{ externalcacertfiledest }}"
  when: "useextrernalcert == true"

- name: "Install idm server with the following options..."
  debug:
    msg: "{{ idmserveropts }}"

- name: "Configure IdM - this takes about 10 minutes - coffee time..."
  command: "ipa-server-install -U --hostname={{ ansible_fqdn }} --domain={{ ansible_domain }} --realm={{ ansible_domain | upper }}  --admin-password {{ idm_admin }} --ds-password {{ idm_admin }} {{ idmserveropts }}"

- import_tasks: add_std_user_groups.yml
- import_tasks: add_std_users.yml
- import_tasks: add_std_sudo_rules.yml
- import_tasks: add_std_hbac_rules.yml
- import_tasks: role_complete.yml

