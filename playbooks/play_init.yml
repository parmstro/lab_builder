---
# This file is used to load the global environment for each play. 
# The example configuration requires these includes, add or remove 
# what is needed to suit your purposes.
- set_fact: 
    vars_dir: "{{ playbook_dir }}/vars"

- name: "Configure Red Hat IdM prerequisites"
  set_fact:
    idm_variable_file: "{{ vars_dir }}/idm_vars.yml"

- name: "Configure Red Hat Satellite prerequisites"
  set_fact:
    sat_variable_file: "{{ vars_dir }}/sat_vars.yml"

- name: "Configure Lab Builder Phase Definition file"
  set_fact:
    phase_definition_file: "{{ vars_dir }}/phase_definition.yml"

- name: "Set Base Configuration Password Randomization"
  set_fact:
    password_config_file: "{{ vars_dir }}/password_vars.yml"

- name: "Configure Encrypted Password Target File"
  set_fact:
    encrypted_passwords_file: "{{ vars_dir }}/encrypted_password.yml"

- name: "Configure Phase Lock directory"
  set_fact:
    locks_dir: "{{ playbook_dir }}/locks"

- name: "Initialize bootstrap_role"
  set_fact:
    bootstrap_role: "none"

- name: "Ensuring lock dir"
  file:
    path: "{{ locks_dir }}"
    state: directory

- name: "Write phase lock file"
  file:
    path: "{{ locks_dir }}/{{ phase_name }}_begin"
    state: touch

- name: "Set Variable files to read only"
  file:
    dest: "{{ vars_dir }}"
    state: directory
    owner: root
    group: root
    mode: 0744
    recurse: yes

- name: "Has prepare been run"
  stat:
    path: "{{ playbook_dir }}/bootstrap_config"
  register: bc

- fail:
    msg: "Bootstrap configuration note found. Please run ansible-playbook prepare.yml and reboot before running site.yml"
  when: "bc.stat.exists == false"

- name: "Reading bootstrap configuration"
  include_vars:
    file: "{{ playbook_dir }}/bootstrap_config"

- name: "Starting lab_builder for localhost {{ bootstrap_fqdn }} in role {{ bootstrap_role }}"
  include_vars: 
    file: "{{ phase_definition_file }}"
    
- name: "Including specified password generation file {{ password_config_file }}"
  include_vars: 
    file: "{{ password_config_file }}"

- name: "Discover password config"
  stat:
    path: "{{ output_file }}"
  register: of

- name: "Password target does not exist. Generate passwords"
  include_tasks: site_generate_passwords.yml
  when: "of.stat.exists == false"

- name: "Include encrypted passwords"
  include_vars:
    file: "{{ output_file }}"


